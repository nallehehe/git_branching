--
-- PostgreSQL database dump
--

-- Dumped from database version 17.0
-- Dumped by pg_dump version 17.0

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: author; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.author (
    authorid integer NOT NULL,
    authorsname character varying(250) NOT NULL,
    book character varying(255),
    description text,
    author_backgrund text
);


ALTER TABLE public.author OWNER TO postgres;

--
-- Name: author_autorid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.author ALTER COLUMN authorid ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.author_autorid_seq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 1000000
    CACHE 1
);


--
-- Name: books; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.books (
    isbn text NOT NULL,
    title character varying(250) NOT NULL,
    price numeric(10,2) NOT NULL,
    pagecount integer NOT NULL,
    authorsname character varying(255),
    description text,
    author_id integer
);


ALTER TABLE public.books OWNER TO postgres;

--
-- Name: customer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.customer (
    customerid integer NOT NULL,
    name character varying(200) NOT NULL,
    email text NOT NULL,
    phone integer,
    address text,
    password text NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.customer OWNER TO postgres;

--
-- Name: customer_customerid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.customer ALTER COLUMN customerid ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.customer_customerid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: orderraw; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.orderraw (
    orderid integer NOT NULL,
    book_id character varying(13) NOT NULL,
    quantity integer
);


ALTER TABLE public.orderraw OWNER TO postgres;

--
-- Name: orders; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.orders (
    orderid integer NOT NULL,
    customerid integer,
    isbn text,
    orderdate date NOT NULL
);


ALTER TABLE public.orders OWNER TO postgres;

--
-- Name: orders_orderid_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.orders ALTER COLUMN orderid ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.orders_orderid_seq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0
    MAXVALUE 100000000
    CACHE 1
);


--
-- Data for Name: author; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.author (authorid, authorsname, book, description, author_backgrund) FROM stdin;
1	john grisham	firm	the new york	john grisham has been writing fantasy novels.
2	jasmin	the fault	exchange	jasmin has been writing romantic novels.
3	alex	good day	about day	alex has been writing action novels.
4	lena	campany	about jobb	lena has been writing drama novels.
5	joel	lucky	about luck	joel has been writing children novels.
6	ady	life	about life	ady has been writing action novels.
7	email	ungdomar	about teenagers	email has been writing comedy novels.
8	nadja	life story	about life	Background not available
9	diana	love	bout love	diana has been writing fantasy novels.
10	kajsa	tady	about life	kajsa has been writing science fiction novels.
11	Rimi	week	about weekend	Background not available
12	gisham	firm	the new york	Background not available
13	shams	the faul	exchange	shams has been writing romantic novels.
14	Stina	good days	about days	Background not available
15	Tomas	campany	about jobb	Background not available
16	danial	lucky	about luck	danial has been writing action novels.
17	Anas	life	about life	Background not available
18	sara	ungdomar	about teenagers	Background not available
19	kim	life story	about life	Background not available
20	peter	love	about love	Background not available
21	Elin	tady	about life	Background not available
\.


--
-- Data for Name: books; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.books (isbn, title, price, pagecount, authorsname, description, author_id) FROM stdin;
20142005	firm	169.00	150	john grisham	the new york	1
20142007	the fault	130.00	234	jasmin	exchange	2
20142009	good day	123.00	245	alex	about day	3
20142011	campany	123.00	234	lena	about jobb	4
20142045	the real love	123.00	234	lena	about jobb	4
20142013	lucky	345.00	334	joel	about luck	5
20142047	stories	123.00	234	joel	about luck	5
20142015	life	123.00	456	ady	about life	6
20142049	the first day	123.00	456	ady	about life	6
20142017	ungdomar	234.00	567	email	about teenagers	7
20142051	my love	234.00	567	email	about teenagers	7
20142019	life story	324.00	342	nadja	about life	8
20142053	new begninig	345.00	456	nadja	about life	8
20142021	love	234.00	345	diana	bout love	9
20142055	brothers	345.00	456	diana	bout love	9
20142023	tady	455.00	567	kajsa	about life	10
20142057	best familj	455.00	567	kajsa	about life	10
20142025	week	234.00	675	Rimi	about weekend	11
20142059	host	234.00	675	Rimi	about weekend	11
20142027	holiday	345.00	123	gisham	the new york	12
20142061	the end	345.00	123	gisham	the new york	12
20142029	the faul	324.00	231	shams	exchange	13
20142063	visual	324.00	231	shams	exchange	13
20142031	good days	324.00	456	Stina	about days	14
20142033	flower	321.00	456	Tomas	about jobb	15
20142035	north	346.00	435	danial	about luck	16
20142037	what	432.00	543	Anas	about life	17
20142039	selint hours	435.00	543	sara	about teenagers	18
20142041	downtown	234.00	321	kim	about life	19
20142043	hoppning	43.00	456	peter	about love	20
20142065	tady	214.00	342	Elin	about life	21
\.


--
-- Data for Name: customer; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.customer (customerid, name, email, phone, address, password, created_at) FROM stdin;
1	shams	shamsay_1986@yahoo.com	707474460	torstövägen 42	$2a$06$GewdkIR77p0k3dhETud5QOxv7GM8elzcnpWqvIF6AxBUD73kQYpQu	2024-11-26 18:51:55.471171
2	yasmin	yasmin_2011@yahoo.com	707474670	torstövägen 42	$2a$06$eHB5ZRTXzDwVdVWxsjTlYevC0Vp2z6gJH7wYTilwC2ERDT6kvzih.	2024-11-26 18:51:55.471171
3	Alex	Alexandr@yahoo.com	707474567	bokövägen 42	$2a$06$wOUj3wgU00bsb9XkECh5seiMVEXWYqP2ZNQNrbgWazdV4S/qvkZHW	2024-11-26 18:51:55.471171
4	joel	joel@yahoo.com	745674567	adventsvägen 42	$2a$06$Ww5kA3JszHpJkUXTlHCs/..qhbwHun2cHBSmhafQDEDM2EGsrWw2y	2024-11-26 18:51:55.471171
6	nadja	nadja@yahoo.com	745674567	adventsvägen 42	$2a$06$RcWLlfDGugFdod2QUzjxVO1LFNrgN9uUxISjoOA4kzE7gWXKoYJq6	2024-11-26 18:51:55.471171
7	Lea	lena@yahoo.com	8974567	march 32	$2a$06$WOMqHr8A1086Lv0serzU0ejqZuTCJ4kBZ6gDbphB0CFJlVSgeMpWi	2024-11-26 18:51:55.471171
8	diana	dianaa@yahoo.com	7346567	lilla gatan 42	$2a$06$E4Dc1K98i8dOQ9d7tesUvex1MCBw62R7KzfUsBuY8HUcogMRTczDK	2024-11-26 18:51:55.471171
9	norra	norra@yahoo.com	74674567	november 12	$2a$06$QlPHyJJHriaaR2onst2zSeQKqicOWhEBddOx/8lvme00e.hdlNS5q	2024-11-26 18:51:55.471171
10	elin	elin@yahoo.com	6774567	september 42	$2a$06$iST5Dhs.a9xR0cCJSDloQ.KaR4dEbVU3bWOSFCZpW.RIlnSGSMsXi	2024-11-26 18:51:55.471171
11	louis	louis@yahoo.com	7474567	oktober 12	$2a$06$15hTeC6uWyhlfnEM8NBe4ObXda9gwIu05H4YLBBejzrsts7j.iFKC	2024-11-26 18:51:55.471171
12	kajsa	kajsa@yahoo.com	7474567	april 42	$2a$06$n4m9aNuUeIrOw8Z13fnhIOyUJ0XLSGmAnump/AVF05h8NTxja.4Ja	2024-11-26 18:51:55.471171
13	alia	alia@yahoo.com	78567567	januari 72	$2a$06$p5lovaRLlA6rXSBSTboT3OwkcFaM/g./NNcDWTSW2Xm/T9GICG5Iq	2024-11-26 18:51:55.471171
14	sara	sara@yahoo.com	75674567	februari 92	$2a$06$I9YzPavaUn1qzl56G6Dx2utdOCmhVN0Snrs6wgG90wlxCFLFHcAam	2024-11-26 18:51:55.471171
15	kim	kim@yahoo.com	67574567	juni 23	$2a$06$bAgZoeAhUPipJkK8Gk8Q1uSWKprUBREoa7PXtArdGdzyOy/5WowtS	2024-11-26 18:51:55.471171
5	ali	alian@yahoo.com	735554259	march32	$2a$06$QvRxQY1jjcoaNOoAdcPHLu5r5bnz/hJ4Rvza5rdD.hM/9qrTumD2O	2024-11-26 18:51:55.471171
\.


--
-- Data for Name: orderraw; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.orderraw (orderid, book_id, quantity) FROM stdin;
1	20142005	2
2	20142005	1
3	20142017	3
3	20142009	1
5	20142011	5
6	20142021	1
7	20142015	3
8	20142009	2
9	20142021	4
10	20142017	2
\.


--
-- Data for Name: orders; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.orders (orderid, customerid, isbn, orderdate) FROM stdin;
1	4	20142005	2024-10-23
2	6	20142005	2024-10-25
3	6	20142007	2024-10-27
4	15	20142009	2024-10-28
5	7	20142011	2024-10-12
6	8	20142015	2024-11-06
7	9	20142023	2024-11-07
8	1	20142019	2024-11-02
9	8	20142015	2024-09-23
10	10	20142025	2024-09-27
11	8	20142027	2024-11-15
12	11	20142011	2024-11-11
13	3	20142017	2024-10-09
14	2	20142021	2024-09-13
15	12	20142029	2024-10-17
16	14	20142027	2024-10-23
\.


--
-- Name: author_autorid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.author_autorid_seq', 21, true);


--
-- Name: customer_customerid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.customer_customerid_seq', 1, false);


--
-- Name: orders_orderid_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.orders_orderid_seq', 126, true);


--
-- Name: author author_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.author
    ADD CONSTRAINT author_pkey PRIMARY KEY (authorid);


--
-- Name: books books_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.books
    ADD CONSTRAINT books_pkey PRIMARY KEY (isbn);


--
-- Name: customer customer_email_email1_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.customer
    ADD CONSTRAINT customer_email_email1_key UNIQUE (email) INCLUDE (email);


--
-- Name: customer customer_passwordHash _passwordHash 1_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.customer
    ADD CONSTRAINT "customer_passwordHash _passwordHash 1_key" UNIQUE (password) INCLUDE (password);


--
-- Name: customer customer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.customer
    ADD CONSTRAINT customer_pkey PRIMARY KEY (customerid);


--
-- Name: orderraw orderraw_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orderraw
    ADD CONSTRAINT orderraw_pkey PRIMARY KEY (orderid, book_id);


--
-- Name: orders orders_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_pkey PRIMARY KEY (orderid);


--
-- Name: books author_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.books
    ADD CONSTRAINT author_id FOREIGN KEY (author_id) REFERENCES public.author(authorid) ON DELETE CASCADE;


--
-- Name: orderraw fk_book; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orderraw
    ADD CONSTRAINT fk_book FOREIGN KEY (book_id) REFERENCES public.books(isbn);


--
-- Name: orderraw fk_order; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orderraw
    ADD CONSTRAINT fk_order FOREIGN KEY (orderid) REFERENCES public.orders(orderid);


--
-- Name: orders fk_orders_books; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT fk_orders_books FOREIGN KEY (isbn) REFERENCES public.books(isbn) ON DELETE CASCADE;


--
-- Name: orders fk_orders_customer; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT fk_orders_customer FOREIGN KEY (customerid) REFERENCES public.customer(customerid) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

